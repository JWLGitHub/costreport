<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
                http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">


    <context:annotation-config />

    <!-- Component scan to find all Spring components -->
    <context:component-scan base-package="jwl.prp.retiree.costreport" />


    <!-- Data source - connect to a MySQL instance running on the local machine -->
    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"             value="jdbc:mysql://localhost/cost_report"/>
        <property name="username"        value="jwl"/>
        <property name="password"        value="jwl"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- create job-meta tables automatically -->
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="org/springframework/batch/core/schema-drop-mysql.sql" />
        <jdbc:script location="org/springframework/batch/core/schema-mysql.sql" />
    </jdbc:initialize-database>


    <!-- Job Repository: used to persist the state of the batch job -->
    <!--
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
    </bean>
    -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="dataSource"         ref="dataSource" />
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <!-- Job Launcher: creates the job and the job state before launching it -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>


    <!-- Tasklet -->
    <bean id="fileExistsTasklet" class="jwl.prp.retiree.costreport.tasklet.FileExists" scope="step">
        <property name="inputFilePath" value="#{jobParameters['inputFilePath']}" />
    </bean>


    <!-- Cost Report -->
    <bean id="costReportItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource"   value="file:#{jobParameters['inputFilePath']}" />
        <property name="lineMapper" ref="costReportLineMapper"/>
    </bean>

    <bean id="costReportLineMapper" class="org.springframework.batch.item.file.mapping.PatternMatchingCompositeLineMapper">
        <property name="tokenizers">
            <map>
                <entry key="FHDR*" value-ref="fileHeaderLineTokenizer"/>
                <entry key="AHDR*" value-ref="applicationHeaderLineTokenizer"/>
                <entry key="DETL**" value-ref="applicationDetailLineTokenizer"/>
            </map>
        </property>
        <property name="fieldSetMappers">
            <map>
                <entry key="FHDR*" value-ref="fileHeaderFieldSetMapper"/>
                <entry key="AHDR*" value-ref="applicationHeaderFieldSetMapper"/>
                <entry key="DETL*" value-ref="applicationDetailFieldSetMapper"/>
            </map>
        </property>
    </bean>


    <!-- File Header -->
    <bean id="fileHeaderItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource"   value="file:#{jobParameters['inputFilePath']}" />
        <property name="lineMapper" ref="fileHeaderLineMapper"/>
    </bean>

    <bean id="fileHeaderLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <property name="lineTokenizer"  ref="fileHeaderLineTokenizer"/>
        <property name="fieldSetMapper" ref="fileHeaderFieldSetMapper"/>
    </bean>

    <bean id="fileHeaderLineTokenizer" class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
        <property name="columns" value="1-4,5,6-15,16-23,24-31,32-110"/>
        <property name="names"   value="recordType,submitterType,submitterID,submitterDate,submitterTime,filler"/>
    </bean>

    <bean id="fileHeaderFieldSetMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
        <property name="prototypeBeanName"   value="fileHeader"/>
    </bean>

    <bean id="fileHeader" class="jwl.prp.retiree.costreport.entity.FileHeader" scope="prototype" />


    <!-- Application Header -->
    <bean id="applicationHeaderItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource"   value="file:#{jobParameters['inputFilePath']}" />
        <property name="lineMapper" ref="applicationHeaderLineMapper"/>
    </bean>

    <bean id="applicationHeaderLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <property name="lineTokenizer"  ref="applicationHeaderLineTokenizer"/>
        <property name="fieldSetMapper" ref="applicationHeaderFieldSetMapper"/>
    </bean>

    <bean id="applicationHeaderLineTokenizer" class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
        <property name="columns" value="1-4,5-14,15-110"/>
        <property name="names"   value="recordType,applicationID,filler"/>
    </bean>

    <bean id="applicationHeaderFieldSetMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
        <property name="prototypeBeanName"   value="applicationHeader"/>
    </bean>

    <bean id="applicationHeader" class="jwl.prp.retiree.costreport.entity.ApplicationHeader" scope="prototype" />


    <!-- Application Detail -->
    <bean id="applicationDetailItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource"   value="file:#{jobParameters['inputFilePath']}" />
        <property name="lineMapper" ref="applicationHeaderLineMapper"/>
    </bean>

    <bean id="applicationDetailLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <property name="lineTokenizer"  ref="applicationHeaderLineTokenizer"/>
        <property name="fieldSetMapper" ref="applicationHeaderFieldSetMapper"/>
    </bean>

    <bean id="applicationDetailLineTokenizer" class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
        <property name="columns" value="1-4,5-24,25-30,31-42,43-54,55-66,67-78,79-90,91-110"/>
        <property name="names"   value="recordType,uniqueBenefitOptionIdentifier,rxCostYearMonth,estimatedPremium,grossRetireeCost,thresholdReduction,limitReduction,estimatedCostAdjustment,filler"/>
    </bean>

    <bean id="applicationDetailFieldSetMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
        <property name="prototypeBeanName"   value="applicationDetail"/>
    </bean>

    <bean id="applicationDetail" class="jwl.prp.retiree.costreport.entity.ApplicationDetail" scope="prototype" />


    <!--
    <bean id="costReportItemWriter" class="jwl.prp.retiree.costreport.writer.DummyItemWriter"/>
    -->

    <bean id="costReportItemWriter" class="jwl.prp.retiree.costreport.writer.CostReportItemWriter"/>
</beans>